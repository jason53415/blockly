// This file was automatically generated.  Do not modify.

'use strict';

Blockly.Msg["ADD_COMMENT"] = "Añadir comentario";
Blockly.Msg["ARKANOID_ACTION_1"] = "serving left";  // untranslated
Blockly.Msg["ARKANOID_ACTION_2"] = "serving right";  // untranslated
Blockly.Msg["ARKANOID_ACTION_3"] = "moving left";  // untranslated
Blockly.Msg["ARKANOID_ACTION_4"] = "moving right";  // untranslated
Blockly.Msg["ARKANOID_ACTION_5"] = "doing nothing";  // untranslated
Blockly.Msg["ARKANOID_ACTION_6"] = "reset";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_1"] = "left boundary";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_2"] = "right boundary";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_3"] = "top boundary";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_4"] = "bottom boundary";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_5"] = "platform width";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_6"] = "platform height";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_7"] = "brick width";  // untranslated
Blockly.Msg["ARKANOID_CONSTANT_8"] = "brick height";  // untranslated
Blockly.Msg["ARKANOID_GAME_STATUS_1"] = "alive";  // untranslated
Blockly.Msg["ARKANOID_GAME_STATUS_2"] = "pass";  // untranslated
Blockly.Msg["ARKANOID_GAME_STATUS_3"] = "over";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_1"] = "# frame";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_2"] = "game status";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_3"] = "x coordinate of ball";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_4"] = "y coordinate of ball";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_5"] = "x coordinate of platform";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_6"] = "y coordinate of platform";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_7"] = "list of brick positions";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_8"] = "list of hard brick positions";  // untranslated
Blockly.Msg["ARKANOID_SCENE_INFO_9"] = "dictionary of all information";  // untranslated
Blockly.Msg["CANNOT_DELETE_VARIABLE_PROCEDURE"] = "No se puede eliminar la variable '%1' porque es parte de la definición de la función '%2'";
Blockly.Msg["CHANGE_VALUE_TITLE"] = "Cambiar el valor:";
Blockly.Msg["CLEAN_UP"] = "Limpiar los bloques";
Blockly.Msg["COLLAPSED_WARNINGS_WARNING"] = "Bloques colapsados contienen advertencias.";
Blockly.Msg["COLLAPSE_ALL"] = "Contraer bloques";
Blockly.Msg["COLLAPSE_BLOCK"] = "Contraer bloque";
Blockly.Msg["COLOUR_BLEND_COLOUR1"] = "color 1";
Blockly.Msg["COLOUR_BLEND_COLOUR2"] = "color 2";
Blockly.Msg["COLOUR_BLEND_HELPURL"] = "https://meyerweb.com/eric/tools/color-blend/#:::rgbp";  // untranslated
Blockly.Msg["COLOUR_BLEND_RATIO"] = "proporción";
Blockly.Msg["COLOUR_BLEND_TITLE"] = "combinar";
Blockly.Msg["COLOUR_BLEND_TOOLTIP"] = "Combina dos colores con una proporción determinada (0,0-1,0).";
Blockly.Msg["COLOUR_PICKER_HELPURL"] = "https://es.wikipedia.org/wiki/Color";
Blockly.Msg["COLOUR_PICKER_TOOLTIP"] = "Elige un color de la paleta.";
Blockly.Msg["COLOUR_RANDOM_HELPURL"] = "http://randomcolour.com";  // untranslated
Blockly.Msg["COLOUR_RANDOM_TITLE"] = "color aleatorio";
Blockly.Msg["COLOUR_RANDOM_TOOLTIP"] = "Elige un color al azar.";
Blockly.Msg["COLOUR_RGB_BLUE"] = "azul";
Blockly.Msg["COLOUR_RGB_GREEN"] = "verde";
Blockly.Msg["COLOUR_RGB_HELPURL"] = "https://www.december.com/html/spec/colorpercompact.html";  // untranslated
Blockly.Msg["COLOUR_RGB_RED"] = "rojo";
Blockly.Msg["COLOUR_RGB_TITLE"] = "colorear con";
Blockly.Msg["COLOUR_RGB_TOOLTIP"] = "Crea un color con cantidades específicas de rojo, verde y azul. Todos los valores deben encontrarse entre 0 y 100.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#loop-termination-blocks";  // untranslated
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_BREAK"] = "romper el bucle";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_OPERATOR_CONTINUE"] = "continuar con la siguiente iteración del bucle";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_BREAK"] = "Romper el bucle que lo contiene.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_TOOLTIP_CONTINUE"] = "Saltar el resto de este bucle, y continuar con la siguiente iteración.";
Blockly.Msg["CONTROLS_FLOW_STATEMENTS_WARNING"] = "Atención: este bloque puede usarse solamente dentro de un bucle.";
Blockly.Msg["CONTROLS_FOREACH_HELPURL"] = "https://es.wikipedia.org/wiki/Foreach";
Blockly.Msg["CONTROLS_FOREACH_TITLE"] = "para cada elemento %1 en la lista %2";
Blockly.Msg["CONTROLS_FOREACH_TOOLTIP"] = "Para cada elemento en una lista, establecer la variable '%1' al elemento y luego hacer algunas declaraciones.";
Blockly.Msg["CONTROLS_FOR_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#count-with";  // untranslated
Blockly.Msg["CONTROLS_FOR_TITLE"] = "contar con %1 desde %2 hasta %3 de a %4";
Blockly.Msg["CONTROLS_FOR_TOOLTIP"] = "Hacer que la variable \"%1\" tome los valores desde el número de inicio hasta el número final, contando con el intervalo especificado, y hacer los bloques especificados.";
Blockly.Msg["CONTROLS_IF_ELSEIF_TOOLTIP"] = "Agregar una condición a este bloque.";
Blockly.Msg["CONTROLS_IF_ELSE_TOOLTIP"] = "Agregar una condición general final a este bloque.";
Blockly.Msg["CONTROLS_IF_HELPURL"] = "https://github.com/google/blockly/wiki/IfElse";  // untranslated
Blockly.Msg["CONTROLS_IF_IF_TOOLTIP"] = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque.";
Blockly.Msg["CONTROLS_IF_MSG_ELSE"] = "sino";
Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"] = "sino si";
Blockly.Msg["CONTROLS_IF_MSG_IF"] = "si";
Blockly.Msg["CONTROLS_IF_TOOLTIP_1"] = "Si un valor es verdadero, entonces hacer algunas declaraciones.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_2"] = "Si un valor es verdadero, entonces hacer el primer bloque de declaraciones.  De lo contrario, hacer el segundo bloque de declaraciones.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_3"] = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones.";
Blockly.Msg["CONTROLS_IF_TOOLTIP_4"] = "Si el primer valor es verdadero, entonces hacer el primer bloque de declaraciones. De lo contrario, si el segundo valor es verdadero, hacer el segundo bloque de declaraciones. Si ninguno de los valores son verdaderos, hacer el último bloque de declaraciones.";
Blockly.Msg["CONTROLS_REPEAT_HELPURL"] = "https://en.wikipedia.org/wiki/For_loop";
Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"] = "hacer";
Blockly.Msg["CONTROLS_REPEAT_TITLE"] = "repetir %1 veces";
Blockly.Msg["CONTROLS_REPEAT_TOOLTIP"] = "Hacer algunas declaraciones varias veces.";
Blockly.Msg["CONTROLS_WHILEUNTIL_HELPURL"] = "https://github.com/google/blockly/wiki/Loops#repeat";  // untranslated
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_UNTIL"] = "repetir hasta";
Blockly.Msg["CONTROLS_WHILEUNTIL_OPERATOR_WHILE"] = "repetir mientras";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_UNTIL"] = "Mientras un valor sea falso, entonces hacer algunas declaraciones.";
Blockly.Msg["CONTROLS_WHILEUNTIL_TOOLTIP_WHILE"] = "Mientras un valor sea verdadero, entonces hacer algunas declaraciones.";
Blockly.Msg["DELETE_ALL_BLOCKS"] = "¿Eliminar todos los %1 bloques?";
Blockly.Msg["DELETE_BLOCK"] = "Eliminar bloque";
Blockly.Msg["DELETE_VARIABLE"] = "Borrar la variable \"%1\"";
Blockly.Msg["DELETE_VARIABLE_CONFIRMATION"] = "¿Borrar %1 usos de la variable '%2'?";
Blockly.Msg["DELETE_X_BLOCKS"] = "Eliminar %1 bloques";
Blockly.Msg["DIALOG_CANCEL"] = "Cancelar";
Blockly.Msg["DIALOG_OK"] = "Aceptar";
Blockly.Msg["DICTS_CREATE_EMPTY_TITLE"] = "create empty dictionary";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "dictionary";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder sections to reconfigure this dictionary block.";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_INPUT_WITH"] = "create dictionary with";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_ITEM_KEY"] = "key";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_ITEM_TITLE"] = "key-value";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_ITEM_TOOLTIP"] = "Make a new key-value pair.";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_ITEM_VALUE"] = "value";  // untranslated
Blockly.Msg["DICTS_CREATE_WITH_TOOLTIP"] = "Create a dictionary with any number of key-value pairs.";  // untranslated
Blockly.Msg["DICTS_GET_KEYS"] = "get all keys of %1";  // untranslated
Blockly.Msg["DICTS_GET_KEYS_TOOLTIP"] = "Get all keys of a dictionary.";  // untranslated
Blockly.Msg["DICTS_GET_VALUE"] = "in dictionary %1 get value of key %2";  // untranslated
Blockly.Msg["DICTS_GET_VALUE_TOOLTIP"] = "Retern the value of the specified key in a dictionary.";  // untranslated
Blockly.Msg["DICTS_SET_VALUE"] = "in dictionary %1 set value of key %2 as %3";  // untranslated
Blockly.Msg["DICTS_SET_VALUE_TOOLTIP"] = "Set the value of the specified key in a dictionary.";  // untranslated
Blockly.Msg["DISABLE_BLOCK"] = "Desactivar bloque";
Blockly.Msg["DUPLICATE_BLOCK"] = "Duplicar";
Blockly.Msg["DUPLICATE_COMMENT"] = "Duplicar comentario";
Blockly.Msg["EASY_GAME_ACTION_1"] = "moving up";  // untranslated
Blockly.Msg["EASY_GAME_ACTION_2"] = "moving down";  // untranslated
Blockly.Msg["EASY_GAME_ACTION_3"] = "moving left";  // untranslated
Blockly.Msg["EASY_GAME_ACTION_4"] = "moving right";  // untranslated
Blockly.Msg["EASY_GAME_ACTION_5"] = "doing nothing";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_1"] = "left boundary";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_2"] = "right boundary";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_3"] = "top boundary";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_4"] = "bottom boundary";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_5"] = "ball width";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_6"] = "ball height";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_7"] = "food width";  // untranslated
Blockly.Msg["EASY_GAME_CONSTANT_8"] = "food height";  // untranslated
Blockly.Msg["EASY_GAME_GAME_STATUS_1"] = "alive";  // untranslated
Blockly.Msg["EASY_GAME_GAME_STATUS_2"] = "pass";  // untranslated
Blockly.Msg["EASY_GAME_GAME_STATUS_3"] = "over";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_1"] = "# frame";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_2"] = "game status";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_3"] = "x coordinate of ball";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_4"] = "y coordinate of ball";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_5"] = "x coordinate of platform";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_6"] = "list of foods positions";  // untranslated
Blockly.Msg["EASY_GAME_SCENE_INFO_7"] = "dictionary of all information";  // untranslated
Blockly.Msg["ENABLE_BLOCK"] = "Activar bloque";
Blockly.Msg["EXPAND_ALL"] = "Expandir bloques";
Blockly.Msg["EXPAND_BLOCK"] = "Expandir bloque";
Blockly.Msg["EXTERNAL_INPUTS"] = "Entradas externas";
Blockly.Msg["FILE_CSV_LOAD"] = "load a two-dimensional list %1 from %2.csv using delimiter %3";  // untranslated
Blockly.Msg["FILE_CSV_LOAD_TOOLTIP"] = "Load a two-dimensional list from a CSV file using a specific delimiter.";  // untranslated
Blockly.Msg["FILE_CSV_SAVE"] = "save a two-dimensional list %1 as %2.csv using delimiter %3";  // untranslated
Blockly.Msg["FILE_CSV_SAVE_TOOLTIP"] = "save a two-dimensional list as a CSV file using a specific delimiter.";  // untranslated
Blockly.Msg["FILE_DEFAULT_NAME"] = "file_name";  // untranslated
Blockly.Msg["FILE_LOAD"] = "load %1 from %2.pickle";  // untranslated
Blockly.Msg["FILE_LOAD_TOOLTIP"] = "Load an object from a file.";  // untranslated
Blockly.Msg["FILE_SAVE"] = "save %1 as %2.pickle";  // untranslated
Blockly.Msg["FILE_SAVE_TOOLTIP"] = "Save an object as a file.";  // untranslated
Blockly.Msg["HELP"] = "Ayuda";
Blockly.Msg["INLINE_INPUTS"] = "Entradas en línea";
Blockly.Msg["LISTS_CREATE_EMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-empty-list";  // untranslated
Blockly.Msg["LISTS_CREATE_EMPTY_TITLE"] = "crear lista vacía";
Blockly.Msg["LISTS_CREATE_EMPTY_TOOLTIP"] = "Devuelve una lista, de longitud 0, sin ningún dato";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TITLE_ADD"] = "lista";
Blockly.Msg["LISTS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Agregar, eliminar o reorganizar las secciones para reconfigurar este bloque de lista.";
Blockly.Msg["LISTS_CREATE_WITH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";
Blockly.Msg["LISTS_CREATE_WITH_INPUT_WITH"] = "crear lista con";
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TOOLTIP"] = "Agregar un elemento a la lista.";
Blockly.Msg["LISTS_CREATE_WITH_TOOLTIP"] = "Crear una lista con cualquier número de elementos.";
Blockly.Msg["LISTS_EXTEND_TITLE"] = "extend %1 with all elements in %2";  // untranslated
Blockly.Msg["LISTS_EXTEND_TOOLTIP"] = "Add all the elements in list 2 to the end of the list.";  // untranslated
Blockly.Msg["LISTS_EXTEND_VARIABLE"] = "list";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_FIRST"] = "primero";
Blockly.Msg["LISTS_GET_INDEX_FROM_END"] = "# del final";
Blockly.Msg["LISTS_GET_INDEX_FROM_START"] = "#";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_GET"] = "obtener";
Blockly.Msg["LISTS_GET_INDEX_GET_REMOVE"] = "obtener y eliminar";
Blockly.Msg["LISTS_GET_INDEX_LAST"] = "último";
Blockly.Msg["LISTS_GET_INDEX_RANDOM"] = "aleatorio";
Blockly.Msg["LISTS_GET_INDEX_REMOVE"] = "eliminar";
Blockly.Msg["LISTS_GET_INDEX_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TITLE"] = "in list %1 %2 %3";  // untranslated
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FIRST"] = "Devuelve el primer elemento de una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_FROM"] = "Devuelve el elemento en la posición especificada en una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_LAST"] = "Devuelve el último elemento de una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_RANDOM"] = "Devuelve un elemento aleatorio en una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FIRST"] = "Elimina y devuelve el primer elemento de una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_FROM"] = "Elimina y devuelve el elemento en la posición especificada en una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_LAST"] = "Elimina y devuelve el último elemento de una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_GET_REMOVE_RANDOM"] = "Elimina y devuelve un elemento aleatorio en una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FIRST"] = "Elimina el primer elemento de una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_FROM"] = "Elimina el elemento en la posición especificada en una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_LAST"] = "Elimina el último elemento de una lista.";
Blockly.Msg["LISTS_GET_INDEX_TOOLTIP_REMOVE_RANDOM"] = "Elimina un elemento aleatorio en una lista.";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_END"] = "hasta # del final";
Blockly.Msg["LISTS_GET_SUBLIST_END_FROM_START"] = "hasta #";
Blockly.Msg["LISTS_GET_SUBLIST_END_LAST"] = "hasta el último";
Blockly.Msg["LISTS_GET_SUBLIST_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-a-sublist";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_IN_LIST"] = "in list";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_START_FIRST"] = "obtener sublista desde el primero";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_END"] = "obtener sublista desde # del final";
Blockly.Msg["LISTS_GET_SUBLIST_START_FROM_START"] = "obtener sublista desde #";
Blockly.Msg["LISTS_GET_SUBLIST_TAIL"] = "";  // untranslated
Blockly.Msg["LISTS_GET_SUBLIST_TOOLTIP"] = "Crea una copia de la parte especificada de una lista.";
Blockly.Msg["LISTS_INDEX_FROM_END_TOOLTIP"] = "%1 es el último elemento.";
Blockly.Msg["LISTS_INDEX_FROM_START_TOOLTIP"] = "%1 es el primer elemento.";
Blockly.Msg["LISTS_INDEX_OF_FIRST"] = "encontrar la primera aparición del elemento";
Blockly.Msg["LISTS_INDEX_OF_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#getting-items-from-a-list";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_LAST"] = "encontrar la última aparición del elemento";
Blockly.Msg["LISTS_INDEX_OF_TITLE"] = "in list %1 %2 %3";  // untranslated
Blockly.Msg["LISTS_INDEX_OF_TOOLTIP"] = "Devuelve el índice de la primera/última aparición del elemento en la lista. Devuelve %1 si el elemento no se encuentra.";
Blockly.Msg["LISTS_INLIST"] = "en la lista";
Blockly.Msg["LISTS_INSERT_INDEX_FIRST"] = "at first";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_FROM_END"] = "at # from end";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_FROM_START"] = "at #";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_LAST"] = "at last";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_RANDOM"] = "at random";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_TITLE"] = "in list %1 insert %2 %3";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_TOOLTIP_FIRST"] = "Inserts the item at the start of a list.";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_TOOLTIP_FROM"] = "Inserts the item at the specified position in a list.";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_TOOLTIP_LAST"] = "Append the item to the end of a list.";  // untranslated
Blockly.Msg["LISTS_INSERT_INDEX_TOOLTIP_RANDOM"] = "Inserts the item randomly in a list.";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#is-empty";  // untranslated
Blockly.Msg["LISTS_ISEMPTY_TITLE"] = "%1 está vacía";
Blockly.Msg["LISTS_ISEMPTY_TOOLTIP"] = "Devuelve verdadero si la lista está vacía.";
Blockly.Msg["LISTS_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#length-of";  // untranslated
Blockly.Msg["LISTS_LENGTH_TITLE"] = "longitud de %1";
Blockly.Msg["LISTS_LENGTH_TOOLTIP"] = "Devuelve la longitud de una lista.";
Blockly.Msg["LISTS_REPEAT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#create-list-with";  // untranslated
Blockly.Msg["LISTS_REPEAT_TITLE"] = "crear lista con el elemento %1 repetido %2 veces";
Blockly.Msg["LISTS_REPEAT_TOOLTIP"] = "Crea una lista que consta de un valor dado repetido el número de veces especificado.";
Blockly.Msg["LISTS_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#reversing-a-list";
Blockly.Msg["LISTS_REVERSE_MESSAGE0"] = "invertir %1";
Blockly.Msg["LISTS_REVERSE_TOOLTIP"] = "Invertir una copia de una lista.";
Blockly.Msg["LISTS_SET_INDEX_FIRST"] = "set first";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_FROM_END"] = "set # from end";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_FROM_START"] = "set #";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#in-list--set";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_LAST"] = "set last";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_RANDOM"] = "set random";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TITLE"] = "in list %1 %2 as %3";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_FIRST"] = "Sets the first item in a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_FROM"] = "Sets the item at the specified position in a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_LAST"] = "Sets the last item in a list.";  // untranslated
Blockly.Msg["LISTS_SET_INDEX_TOOLTIP_RANDOM"] = "Sets a random item in a list.";  // untranslated
Blockly.Msg["LISTS_SORT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#sorting-a-list";
Blockly.Msg["LISTS_SORT_ORDER_ASCENDING"] = "ascendente";
Blockly.Msg["LISTS_SORT_ORDER_DESCENDING"] = "descendente";
Blockly.Msg["LISTS_SORT_TITLE"] = "orden %1 %2 %3";
Blockly.Msg["LISTS_SORT_TOOLTIP"] = "Ordenar una copia de una lista.";
Blockly.Msg["LISTS_SORT_TYPE_IGNORECASE"] = "alfabético, ignorar mayúscula/minúscula";
Blockly.Msg["LISTS_SORT_TYPE_NUMERIC"] = "numérico";
Blockly.Msg["LISTS_SORT_TYPE_TEXT"] = "alfabético";
Blockly.Msg["LISTS_SPLIT_HELPURL"] = "https://github.com/google/blockly/wiki/Lists#splitting-strings-and-joining-lists";
Blockly.Msg["LISTS_SPLIT_LIST_FROM_TEXT"] = "hacer lista a partir de texto";
Blockly.Msg["LISTS_SPLIT_TEXT_FROM_LIST"] = "hacer texto a partir de lista";
Blockly.Msg["LISTS_SPLIT_TITLE"] = "%2 %1 with delimiter %3";  // untranslated
Blockly.Msg["LISTS_SPLIT_TOOLTIP_JOIN"] = "Unir una lista de textos en un solo texto, separado por un delimitador.";
Blockly.Msg["LISTS_SPLIT_TOOLTIP_SPLIT"] = "Dividir el texto en una lista de textos, separando en cada delimitador.";
Blockly.Msg["LOGIC_BOOLEAN_FALSE"] = "falso";
Blockly.Msg["LOGIC_BOOLEAN_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#values";  // untranslated
Blockly.Msg["LOGIC_BOOLEAN_TOOLTIP"] = "Devuelve verdadero o falso.";
Blockly.Msg["LOGIC_BOOLEAN_TRUE"] = "verdadero";
Blockly.Msg["LOGIC_COMPARE_HELPURL"] = "https://es.wikipedia.org/wiki/Desigualdad_matemática";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_EQ"] = "Devuelve verdadero si ambas entradas son iguales.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GT"] = "Devuelve verdadero si la primera entrada es mayor que la segunda entrada.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_GTE"] = "Devuelve verdadero si la primera entrada es mayor o igual a la segunda entrada.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LT"] = "Devuelve verdadero si la primera entrada es menor que la segunda entrada.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_LTE"] = "Devuelve verdadero si la primera entrada es menor que o igual a la segunda entrada.";
Blockly.Msg["LOGIC_COMPARE_TOOLTIP_NEQ"] = "Devuelve verdadero si ambas entradas son distintas.";
Blockly.Msg["LOGIC_NEGATE_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#not";  // untranslated
Blockly.Msg["LOGIC_NEGATE_TITLE"] = "no %1";
Blockly.Msg["LOGIC_NEGATE_TOOLTIP"] = "Devuelve verdadero si la entrada es falsa. Devuelve falso si la entrada es verdadera.";
Blockly.Msg["LOGIC_NULL"] = "nulo";
Blockly.Msg["LOGIC_NULL_HELPURL"] = "https://en.wikipedia.org/wiki/Nullable_type";  // untranslated
Blockly.Msg["LOGIC_NULL_TOOLTIP"] = "Devuelve nulo.";
Blockly.Msg["LOGIC_OPERATION_AND"] = "y";
Blockly.Msg["LOGIC_OPERATION_HELPURL"] = "https://github.com/google/blockly/wiki/Logic#logical-operations";  // untranslated
Blockly.Msg["LOGIC_OPERATION_OR"] = "o";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_AND"] = "Devuelve verdadero si ambas entradas son verdaderas.";
Blockly.Msg["LOGIC_OPERATION_TOOLTIP_OR"] = "Devuelve verdadero si al menos una de las entradas es verdadera.";
Blockly.Msg["LOGIC_TERNARY_CONDITION"] = "prueba";
Blockly.Msg["LOGIC_TERNARY_HELPURL"] = "https://en.wikipedia.org/wiki/%3F:";  // untranslated
Blockly.Msg["LOGIC_TERNARY_IF_FALSE"] = "si es falso";
Blockly.Msg["LOGIC_TERNARY_IF_TRUE"] = "si es verdadero";
Blockly.Msg["LOGIC_TERNARY_TOOLTIP"] = "Comprueba la condición en \"prueba\". Si la condición es verdadera, devuelve el valor \"si es verdadero\"; de lo contrario, devuelve el valor \"si es falso\".";
Blockly.Msg["MATH_ADDITION_SYMBOL"] = "+";  // untranslated
Blockly.Msg["MATH_ARITHMETIC_HELPURL"] = "https://es.wikipedia.org/wiki/Aritmética";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_ADD"] = "Devuelve la suma de ambos números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_DIVIDE"] = "Devuelve el cociente de ambos números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MINUS"] = "Devuelve la diferencia de ambos números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_MULTIPLY"] = "Devuelve el producto de ambos números.";
Blockly.Msg["MATH_ARITHMETIC_TOOLTIP_POWER"] = "Devuelve el primer número elevado a la potencia del segundo.";
Blockly.Msg["MATH_ATAN2_HELPURL"] = "https://es.wikipedia.org/wiki/Arcotangente_de_dos_par%C3%A1metros";
Blockly.Msg["MATH_ATAN2_TITLE"] = "Arcotangente de X:%1 Y:%2";
Blockly.Msg["MATH_ATAN2_TOOLTIP"] = "Regresar el arcotangente del punto (X,Y) en grados de -180 a 180.";
Blockly.Msg["MATH_CHANGE_HELPURL"] = "https://en.wikipedia.org/wiki/Programming_idiom#Incrementing_a_counter";
Blockly.Msg["MATH_CHANGE_TITLE"] = "añadir %2 a %1";
Blockly.Msg["MATH_CHANGE_TOOLTIP"] = "Añadir un número a la variable «%1».";
Blockly.Msg["MATH_CONSTANT_HELPURL"] = "https://es.wikipedia.org/wiki/Anexo:Constantes_matemáticas";
Blockly.Msg["MATH_CONSTANT_TOOLTIP"] = "Devuelve una de las constantes comunes: π (3.141…), e (2.718…), φ (1.618…), sqrt(2) (1.414…), sqrt(½) (0.707…) o ∞ (infinito).";
Blockly.Msg["MATH_CONSTRAIN_HELPURL"] = "https://en.wikipedia.org/wiki/Clamping_(graphics)";  // untranslated
Blockly.Msg["MATH_CONSTRAIN_TITLE"] = "limitar %1 entre %2 y %3";
Blockly.Msg["MATH_CONSTRAIN_TOOLTIP"] = "Limitar un número entre los límites especificados (inclusive).";
Blockly.Msg["MATH_CONVERT_TITLE"] = "conver %1 to %2";  // untranslated
Blockly.Msg["MATH_CONVERT_TOOLTIP"] = "Convert a string to integer of floating point number.";  // untranslated
Blockly.Msg["MATH_DIVISION_SYMBOL"] = "÷";  // untranslated
Blockly.Msg["MATH_FLOAT"] = "floating-point number";  // untranslated
Blockly.Msg["MATH_INT"] = "integer";  // untranslated
Blockly.Msg["MATH_IS_DIVISIBLE_BY"] = "es divisible por";
Blockly.Msg["MATH_IS_EVEN"] = "es par";
Blockly.Msg["MATH_IS_NEGATIVE"] = "es negativo";
Blockly.Msg["MATH_IS_ODD"] = "es impar";
Blockly.Msg["MATH_IS_POSITIVE"] = "es positivo";
Blockly.Msg["MATH_IS_PRIME"] = "es primo";
Blockly.Msg["MATH_IS_TOOLTIP"] = "Comprueba si un número es par, impar, primo, entero, positivo, negativo, o si es divisible por un número determinado. Devuelve verdadero o falso.";
Blockly.Msg["MATH_IS_WHOLE"] = "es entero";
Blockly.Msg["MATH_MODULO_HELPURL"] = "https://en.wikipedia.org/wiki/Modulo_operation";
Blockly.Msg["MATH_MODULO_TITLE"] = "resto de %1 ÷ %2";
Blockly.Msg["MATH_MODULO_TOOLTIP"] = "Devuelve el resto al dividir los dos números.";
Blockly.Msg["MATH_MULTIPLICATION_SYMBOL"] = "×";  // untranslated
Blockly.Msg["MATH_NUMBER_HELPURL"] = "https://es.wikipedia.org/wiki/Número";
Blockly.Msg["MATH_NUMBER_TOOLTIP"] = "Un número.";
Blockly.Msg["MATH_ONLIST_HELPURL"] = "";  // untranslated
Blockly.Msg["MATH_ONLIST_OPERATOR_AVERAGE"] = "promedio de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MAX"] = "máximo de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MEDIAN"] = "mediana de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MIN"] = "mínimo de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_MODE"] = "modas de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_RANDOM"] = "elemento aleatorio de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_STD_DEV"] = "desviación estándar de la lista";
Blockly.Msg["MATH_ONLIST_OPERATOR_SUM"] = "suma de la lista";
Blockly.Msg["MATH_ONLIST_TITLE"] = "%1 %2";  // untranslated
Blockly.Msg["MATH_ONLIST_TOOLTIP_AVERAGE"] = "Devuelve el promedio (media aritmética) de los valores numéricos en la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MAX"] = "Devuelve el número más grande en la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MEDIAN"] = "Devuelve la mediana en la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MIN"] = "Devuelve el número más pequeño en la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_MODE"] = "Devuelve una lista de los elementos más comunes en la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_RANDOM"] = "Devuelve un elemento aleatorio de la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_STD_DEV"] = "Devuelve la desviación estándar de la lista.";
Blockly.Msg["MATH_ONLIST_TOOLTIP_SUM"] = "Devuelve la suma de todos los números en la lista.";
Blockly.Msg["MATH_POWER_SYMBOL"] = "^";  // untranslated
Blockly.Msg["MATH_RANDOM_FLOAT_HELPURL"] = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";
Blockly.Msg["MATH_RANDOM_FLOAT_TITLE_RANDOM"] = "fracción aleatoria";
Blockly.Msg["MATH_RANDOM_FLOAT_TOOLTIP"] = "Devuelve una fracción aleatoria entre 0,0 (ambos inclusive) y 1.0 (exclusivo).";
Blockly.Msg["MATH_RANDOM_INT_HELPURL"] = "https://es.wikipedia.org/wiki/Generador_de_números_aleatorios";
Blockly.Msg["MATH_RANDOM_INT_TITLE"] = "entero aleatorio de %1 a %2";
Blockly.Msg["MATH_RANDOM_INT_TOOLTIP"] = "Devuelve un entero aleatorio entre los dos límites especificados, inclusive.";
Blockly.Msg["MATH_ROUND_HELPURL"] = "https://es.wikipedia.org/wiki/Redondeo";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUND"] = "redondear";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDDOWN"] = "redondear a la baja";
Blockly.Msg["MATH_ROUND_OPERATOR_ROUNDUP"] = "redondear al alza";
Blockly.Msg["MATH_ROUND_TOOLTIP"] = "Redondear un número al alza o a la baja.";
Blockly.Msg["MATH_SINGLE_HELPURL"] = "https://es.wikipedia.org/wiki/Ra%C3%ADz_cuadrada";
Blockly.Msg["MATH_SINGLE_OP_ABSOLUTE"] = "absoluto";
Blockly.Msg["MATH_SINGLE_OP_ROOT"] = "raíz cuadrada";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ABS"] = "Devuelve el valor absoluto de un número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_EXP"] = "Devuelve e a la potencia de un número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LN"] = "Devuelve el logaritmo natural de un número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_LOG10"] = "Devuelve el logaritmo base 10 de un número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_NEG"] = "Devuelve la negación de un número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_POW10"] = "Devuelve 10 a la potencia de un número.";
Blockly.Msg["MATH_SINGLE_TOOLTIP_ROOT"] = "Devuelve la raíz cuadrada de un número.";
Blockly.Msg["MATH_SUBTRACTION_SYMBOL"] = "-";  // untranslated
Blockly.Msg["MATH_TRIG_ACOS"] = "acos";  // untranslated
Blockly.Msg["MATH_TRIG_ASIN"] = "asin";  // untranslated
Blockly.Msg["MATH_TRIG_ATAN"] = "atan";  // untranslated
Blockly.Msg["MATH_TRIG_COS"] = "cos";  // untranslated
Blockly.Msg["MATH_TRIG_HELPURL"] = "https://es.wikipedia.org/wiki/Función_trigonométrica";
Blockly.Msg["MATH_TRIG_SIN"] = "sin";  // untranslated
Blockly.Msg["MATH_TRIG_TAN"] = "tan";  // untranslated
Blockly.Msg["MATH_TRIG_TOOLTIP_ACOS"] = "Devuelve el arcocoseno de un número.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ASIN"] = "Devuelve el arcoseno de un número.";
Blockly.Msg["MATH_TRIG_TOOLTIP_ATAN"] = "Devuelve el arcotangente de un número.";
Blockly.Msg["MATH_TRIG_TOOLTIP_COS"] = "Devuelve el coseno de un grado (no radián).";
Blockly.Msg["MATH_TRIG_TOOLTIP_SIN"] = "Devuelve el seno de un grado (no radián).";
Blockly.Msg["MATH_TRIG_TOOLTIP_TAN"] = "Devuelve la tangente de un grado (no radián).";
Blockly.Msg["MAZE_CAR_ACTION_1"] = "reset";  // untranslated
Blockly.Msg["MAZE_CAR_CONSTANT_1"] = "left boundary";  // untranslated
Blockly.Msg["MAZE_CAR_CONSTANT_2"] = "right boundary";  // untranslated
Blockly.Msg["MAZE_CAR_CONSTANT_3"] = "top boundary";  // untranslated
Blockly.Msg["MAZE_CAR_CONSTANT_4"] = "bottom boundary";  // untranslated
Blockly.Msg["MAZE_CAR_GAME_STATUS_1"] = "alive";  // untranslated
Blockly.Msg["MAZE_CAR_GAME_STATUS_2"] = "pass";  // untranslated
Blockly.Msg["MAZE_CAR_GAME_STATUS_3"] = "over";  // untranslated
Blockly.Msg["MAZE_CAR_INIT_INFO_1"] = "player number";  // untranslated
Blockly.Msg["MAZE_CAR_PLAYER_STATUS_1"] = "1P";  // untranslated
Blockly.Msg["MAZE_CAR_PLAYER_STATUS_2"] = "2P";  // untranslated
Blockly.Msg["MAZE_CAR_PLAYER_STATUS_3"] = "3P";  // untranslated
Blockly.Msg["MAZE_CAR_PLAYER_STATUS_4"] = "4P";  // untranslated
Blockly.Msg["MAZE_CAR_PLAYER_STATUS_5"] = "5P";  // untranslated
Blockly.Msg["MAZE_CAR_PLAYER_STATUS_6"] = "6P";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_1"] = "# frame";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_10"] = "right front sensor value";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_11"] = "left front sensor value";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_2"] = "game status";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_3"] = "x position of the car";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_4"] = "y position of the car";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_5"] = "angle of the car";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_6"] = "end position";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_7"] = "right sensor value";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_8"] = "front sensor value";  // untranslated
Blockly.Msg["MAZE_CAR_SCENE_INFO_9"] = "left sensor value";  // untranslated
Blockly.Msg["MLPLAY_ALPHA_KEYS"] = "alphabet";  // untranslated
Blockly.Msg["MLPLAY_ARROW_KEYS"] = "arrow key";  // untranslated
Blockly.Msg["MLPLAY_CLASS_INITIALIZE"] = "initialize: ";  // untranslated
Blockly.Msg["MLPLAY_CLASS_RESET"] = "reset: ";  // untranslated
Blockly.Msg["MLPLAY_CLASS_TOOLTIP"] = "The main block for playing the game.\nThe program in the \"initialize\" section will be executed once before the game starts.\nThe program in the \"update\" section will be executed once every frame in the game. You can get the current scene information in the game here, and return the next action.\nAfter the game is over, the program in the \"reset\" will be executed once before the next game starts.";  // untranslated
Blockly.Msg["MLPLAY_CLASS_UPDATE"] = "update: ";  // untranslated
Blockly.Msg["MLPLAY_CLASS_WARNING"] = "Warning: Cannot exist more than one MLPlay block.";  // untranslated
Blockly.Msg["MLPLAY_GAME_STATUS"] = "game";  // untranslated
Blockly.Msg["MLPLAY_GAME_STATUS_TOOLTIP"] = "Options to determine the game status.";  // untranslated
Blockly.Msg["MLPLAY_GET_CONSTANT"] = "constant";  // untranslated
Blockly.Msg["MLPLAY_GET_CONSTANT_TOOLTIP"] = "Get the constants of game environment.";  // untranslated
Blockly.Msg["MLPLAY_GET_INFO"] = "get";  // untranslated
Blockly.Msg["MLPLAY_GET_INFO_TOOLTIP"] = "Get scene information in the game.";  // untranslated
Blockly.Msg["MLPLAY_GET_INFO_WARNING"] = "Warning: Cannot get game information outside the \"update\" section of MLPlay block.";  // untranslated
Blockly.Msg["MLPLAY_INIT_INFO"] = "Initial information";  // untranslated
Blockly.Msg["MLPLAY_INIT_INFO_TOOLTIP"] = "Get initial information of the game";  // untranslated
Blockly.Msg["MLPLAY_INIT_INFO_WARNING"] = "Warning: Cannot get initial information outside the \"initialize\" section of MLPlay block.";  // untranslated
Blockly.Msg["MLPLAY_IS_KEY_PRESSED_TOOLTIP"] = "Return the key is pressed or not.";  // untranslated
Blockly.Msg["MLPLAY_KEY_PRESSED"] = "is pressed";  // untranslated
Blockly.Msg["MLPLAY_NUMBER_KEYS"] = "number";  // untranslated
Blockly.Msg["MLPLAY_PLAYER_STATUS"] = "Player";  // untranslated
Blockly.Msg["MLPLAY_PLAYER_STATUS_TOOLTIP"] = "Options to determine the player.";  // untranslated
Blockly.Msg["MLPLAY_RETURN_ACTION"] = "return action";  // untranslated
Blockly.Msg["MLPLAY_RETURN_ACTION_TOOLTIP"] = "Return the next action, or return the reset command after the game is over.";  // untranslated
Blockly.Msg["MLPLAY_RETURN_ACTION_WARNING"] = "Warning: Cannot return an action outside the \"update\" section of MLPlay block.";  // untranslated
Blockly.Msg["MLPLAY_RETURN_MAZECAR_ACTION"] = "return speed of left motor: %1 right motor: %2";  // untranslated
Blockly.Msg["MODEL_ACTIVATION"] = "activation function";  // untranslated
Blockly.Msg["MODEL_ACTIVATION_LOGISTIC"] = "logistic";  // untranslated
Blockly.Msg["MODEL_ACTIVATION_RELU"] = "ReLU";  // untranslated
Blockly.Msg["MODEL_ACTIVATION_TANH"] = "tanh";  // untranslated
Blockly.Msg["MODEL_ALGORITHM"] = "algorithm";  // untranslated
Blockly.Msg["MODEL_ALGORITHM_AUTO"] = "auto";  // untranslated
Blockly.Msg["MODEL_ALGORITHM_BALL_TREE"] = "ball tree";  // untranslated
Blockly.Msg["MODEL_ALGORITHM_BRUTE"] = "brute-force search";  // untranslated
Blockly.Msg["MODEL_ALGORITHM_KD_TREE"] = "k-d tree";  // untranslated
Blockly.Msg["MODEL_BATCH_SIZE"] = "batch size";  // untranslated
Blockly.Msg["MODEL_C"] = "C";  // untranslated
Blockly.Msg["MODEL_CLASSIFICATION"] = "classification model";  // untranslated
Blockly.Msg["MODEL_CREATE"] = "create";  // untranslated
Blockly.Msg["MODEL_CREATE_CLASSIFICATION_TOOLTIP"] = "Create different types of classification model and set its parameters.";  // untranslated
Blockly.Msg["MODEL_CREATE_REGRESSION_TOOLTIP"] = "Create different types of regression model and set its parameters.";  // untranslated
Blockly.Msg["MODEL_DECISION_TREE"] = "decision tree";  // untranslated
Blockly.Msg["MODEL_EVALUATE_CLASSIFICATION"] = "use true results：%1 predicted results：%2 to evaluate accuracy of classification results";  // untranslated
Blockly.Msg["MODEL_EVALUATE_CLASSIFICATION_TOOLTIP"] = "Calculate the proportion of the predicted classification results that is the same as the true results.";  // untranslated
Blockly.Msg["MODEL_EVALUATE_MAE"] = "mean absolute error";  // untranslated
Blockly.Msg["MODEL_EVALUATE_MSE"] = "mean squared error";  // untranslated
Blockly.Msg["MODEL_EVALUATE_R2"] = "coefficient of determination";  // untranslated
Blockly.Msg["MODEL_EVALUATE_REGRESSION"] = "use true results：%1 predicted results：%2 to evaluate %3 of regression results";  // untranslated
Blockly.Msg["MODEL_EVALUATE_REGRESSION_TOOLTIP"] = "Calculate the mean absolute error or mean squared error between the predicted regression results and the true results.";  // untranslated
Blockly.Msg["MODEL_EVALUATE_TOOLTIP"] = "Evaluate the predicted results according to the true results.";  // untranslated
Blockly.Msg["MODEL_HIDDEN_LAYER_SIZES"] = "hidden layer sizes";  // untranslated
Blockly.Msg["MODEL_KNN"] = "k-nearest neighbors";  // untranslated
Blockly.Msg["MODEL_K_FOLD"] = "split training data: %1 target values: %2 for %3-fold cross-validation %4";  // untranslated
Blockly.Msg["MODEL_K_FOLD_TOOLTIP"] = "Perform k-fold cross-validation on the training data randomly or sequentially. This block will return k lists of length 4, including training data, testing data, training targets, and testing targets for each cross-validation.";  // untranslated
Blockly.Msg["MODEL_LINEAR_SVM"] = "linear support vector machine";  // untranslated
Blockly.Msg["MODEL_LOSS"] = "loss funciton";  // untranslated
Blockly.Msg["MODEL_LOSS_EPSILON_INSENSITIVE"] = "linear support vector regression";  // untranslated
Blockly.Msg["MODEL_LOSS_HINGE"] = "hinge loss";  // untranslated
Blockly.Msg["MODEL_LOSS_HUBER"] = "huber loss";  // untranslated
Blockly.Msg["MODEL_LOSS_LOG"] = "logistic regression";  // untranslated
Blockly.Msg["MODEL_LOSS_MODIFIED_HUBER"] = "smoothed hinge loss";  // untranslated
Blockly.Msg["MODEL_LOSS_SQUARED_HINGE"] = "square of hinge loss";  // untranslated
Blockly.Msg["MODEL_LOSS_SQUARED_LOSS"] = "ordinary least squares";  // untranslated
Blockly.Msg["MODEL_MAX_DEPTH"] = "max depth";  // untranslated
Blockly.Msg["MODEL_MIN_SAMPLES_SPLIT"] = "minimum samples required to split";  // untranslated
Blockly.Msg["MODEL_MLP"] = "multilayer perceptron";  // untranslated
Blockly.Msg["MODEL_NO_SHUFFLE"] = "without shuffling";  // untranslated
Blockly.Msg["MODEL_N_ESTIMATORS"] = "number of trees";  // untranslated
Blockly.Msg["MODEL_PENALTY"] = "penalty function";  // untranslated
Blockly.Msg["MODEL_PENALTY_L1"] = "L1 Norm";  // untranslated
Blockly.Msg["MODEL_PENALTY_L2"] = "L2 Norm";  // untranslated
Blockly.Msg["MODEL_PREDICT"] = "use %1 to predict the target for %2";  // untranslated
Blockly.Msg["MODEL_PREDICT_TOOLTIP"] = "Use the trained model to redict the target fro the provided data. The output is a list of the length that equals to the provided data.";  // untranslated
Blockly.Msg["MODEL_RANDOM_FOREST"] = "random forest";  // untranslated
Blockly.Msg["MODEL_REGRESSION"] = "regression model";  // untranslated
Blockly.Msg["MODEL_SGD"] = "stochastic gradient descent";  // untranslated
Blockly.Msg["MODEL_SHUFFLE"] = "after shuffling";  // untranslated
Blockly.Msg["MODEL_TRAIN"] = "use training data: %1 target values: %2 to train %3";  // untranslated
Blockly.Msg["MODEL_TRAIN_TEST_SPLIT"] = "split training data: %1 target values: %2 into %5, %6, %7, %8 with the ratio of %3 %4";  // untranslated
Blockly.Msg["MODEL_TRAIN_TEST_SPLIT_TOOLTIP"] = "Split a certain proportion from the data randomly or sequentially as the test data. This block will return a list of length 4, including the split training data, testing data, training targets, and testing targets.";  // untranslated
Blockly.Msg["MODEL_TRAIN_TOOLTIP"] = "Train the model to predeict target values from training data, both training data and target values should be lists of the same length.";  // untranslated
Blockly.Msg["MODEL_WEIGHT"] = "weights";  // untranslated
Blockly.Msg["MODEL_WEIGHT_DISTANCE"] = "inverse of distance";  // untranslated
Blockly.Msg["MODEL_WEIGHT_UNIFORM"] = "uniform";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_EMPTY_TITLE"] = "create empty ndarray";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_FILL_WITH"] = "filled with";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_CONTAINER"] = "ndarray";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_CONTAINER_TOOLTIP"] = "Add, remove, or reorder dimensions to reconfigure this ndarray block.";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_DIM"] = "dimension";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_DIM_TOOLTIP"] = "Add a dimension to the ndarray.";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_DIM_WITH"] = "create ndarray of shape";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_LIST"] = "create ndarray from %1";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_LIST_TOOLTIP"] = "Create an ndarray from a list.";  // untranslated
Blockly.Msg["NDARRAYS_CREATE_WITH_TOOLTIP"] = "Create an ndarray with any shape.";  // untranslated
Blockly.Msg["NDARRAYS_TO_LIST"] = "convert %1 to list";  // untranslated
Blockly.Msg["NDARRAYS_TO_LIST_TOOLTIP"] = "Return a copy of the ndarray data as a nested list.";  // untranslated
Blockly.Msg["NEW_COLOUR_VARIABLE"] = "Crear una variable de color...";
Blockly.Msg["NEW_NUMBER_VARIABLE"] = "Crear una variable de número...";
Blockly.Msg["NEW_STRING_VARIABLE"] = "Crear una cadena variable...";
Blockly.Msg["NEW_VARIABLE"] = "Crear variable…";
Blockly.Msg["NEW_VARIABLE_TITLE"] = "Nombre de variable nueva:";
Blockly.Msg["NEW_VARIABLE_TYPE_TITLE"] = "Nuevo tipo de variable:";
Blockly.Msg["ORDINAL_NUMBER_SUFFIX"] = "";  // untranslated
Blockly.Msg["PINGPONG_ACTION_1"] = "serving left";  // untranslated
Blockly.Msg["PINGPONG_ACTION_2"] = "serving right";  // untranslated
Blockly.Msg["PINGPONG_ACTION_3"] = "moving left";  // untranslated
Blockly.Msg["PINGPONG_ACTION_4"] = "moving right";  // untranslated
Blockly.Msg["PINGPONG_ACTION_5"] = "doing nothing";  // untranslated
Blockly.Msg["PINGPONG_ACTION_6"] = "reset";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_1"] = "left boundary";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_2"] = "right boundary";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_3"] = "top boundary";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_4"] = "bottom boundary";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_5"] = "platform width";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_6"] = "platform height";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_7"] = "blocker width";  // untranslated
Blockly.Msg["PINGPONG_CONSTANT_8"] = "blocker height";  // untranslated
Blockly.Msg["PINGPONG_GAME_STATUS_1"] = "alive";  // untranslated
Blockly.Msg["PINGPONG_GAME_STATUS_2"] = "1P wins";  // untranslated
Blockly.Msg["PINGPONG_GAME_STATUS_3"] = "2P wins";  // untranslated
Blockly.Msg["PINGPONG_GAME_STATUS_4"] = "draw";  // untranslated
Blockly.Msg["PINGPONG_INIT_INFO_1"] = "player number";  // untranslated
Blockly.Msg["PINGPONG_PLAYER_STATUS_1"] = "1P";  // untranslated
Blockly.Msg["PINGPONG_PLAYER_STATUS_2"] = "2P";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_1"] = "# frame";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_10"] = "y coordinate of 2P platform";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_11"] = "x coordinate of blocker position";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_12"] = "y coordinate of blocker position";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_13"] = "dictionary of all information";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_2"] = "game status";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_3"] = "x coordinate of ball";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_4"] = "y coordinate of ball";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_5"] = "ball velocity along x-axis";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_6"] = "ball velocity along y-axis";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_7"] = "x coordinate of 1P platform";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_8"] = "y coordinate of 1P platform";  // untranslated
Blockly.Msg["PINGPONG_SCENE_INFO_9"] = "x coordinate of 2P platform";  // untranslated
Blockly.Msg["PLOT_PLOT"] = "plot X: %1 Y: %2 marker: %3 line: %4 color: %5";  // untranslated
Blockly.Msg["PLOT_PLOT_TOOLTIP"] = "Plot with given X, Y and style.";  // untranslated
Blockly.Msg["PROCEDURES_ALLOW_STATEMENTS"] = "permitir declaraciones";
Blockly.Msg["PROCEDURES_BEFORE_PARAMS"] = "con:";
Blockly.Msg["PROCEDURES_CALLNORETURN_HELPURL"] = "https://es.wikipedia.org/wiki/Subrutina";
Blockly.Msg["PROCEDURES_CALLNORETURN_TOOLTIP"] = "Ejecuta la función definida por el usuario '%1'.";
Blockly.Msg["PROCEDURES_CALLRETURN_HELPURL"] = "https://es.wikipedia.org/wiki/Subrutina";
Blockly.Msg["PROCEDURES_CALLRETURN_TOOLTIP"] = "Ejecuta la función definida por el usuario '%1' y usa su salida.";
Blockly.Msg["PROCEDURES_CALL_BEFORE_PARAMS"] = "con:";
Blockly.Msg["PROCEDURES_CREATE_DO"] = "Crear '%1'";
Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"] = "Describe esta función...";
Blockly.Msg["PROCEDURES_DEFNORETURN_DO"] = "";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"] = "hacer algo";
Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"] = "para";
Blockly.Msg["PROCEDURES_DEFNORETURN_TOOLTIP"] = "Crea una función sin salida.";
Blockly.Msg["PROCEDURES_DEFRETURN_HELPURL"] = "https://en.wikipedia.org/wiki/Subroutine";  // untranslated
Blockly.Msg["PROCEDURES_DEFRETURN_RETURN"] = "devuelve";
Blockly.Msg["PROCEDURES_DEFRETURN_TOOLTIP"] = "Crea una función con una salida.";
Blockly.Msg["PROCEDURES_DEF_DUPLICATE_WARNING"] = "Advertencia: Esta función tiene parámetros duplicados.";
Blockly.Msg["PROCEDURES_HIGHLIGHT_DEF"] = "Destacar definición de la función";
Blockly.Msg["PROCEDURES_IFRETURN_HELPURL"] = "http://c2.com/cgi/wiki?GuardClause";  // untranslated
Blockly.Msg["PROCEDURES_IFRETURN_TOOLTIP"] = "Si un valor es verdadero, entonces devuelve un segundo valor.";
Blockly.Msg["PROCEDURES_IFRETURN_WARNING"] = "Advertencia: Este bloque solo puede ser utilizado dentro de la definición de una función.";
Blockly.Msg["PROCEDURES_MUTATORARG_TITLE"] = "nombre de entrada:";
Blockly.Msg["PROCEDURES_MUTATORARG_TOOLTIP"] = "Añadir una entrada a la función.";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TITLE"] = "entradas";
Blockly.Msg["PROCEDURES_MUTATORCONTAINER_TOOLTIP"] = "Añadir, eliminar o reordenar entradas para esta función.";
Blockly.Msg["RACINGCAR_ACTION_1"] = "speed up";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_10"] = "do nothing";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_2"] = "brake";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_3"] = "move left";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_4"] = "move left";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_5"] = "speed up and move left";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_6"] = "speed up and move right";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_7"] = "brake and move left";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_8"] = "brake and move right";  // untranslated
Blockly.Msg["RACINGCAR_ACTION_9"] = "reset";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_1"] = "left boundary";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_2"] = "right boundary";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_3"] = "top boundary";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_4"] = "bottom boundary";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_5"] = "car length";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_6"] = "car width";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_7"] = "coin length";  // untranslated
Blockly.Msg["RACINGCAR_CONSTANT_8"] = "coin width";  // untranslated
Blockly.Msg["RACINGCAR_GAME_STATUS_1"] = "alive";  // untranslated
Blockly.Msg["RACINGCAR_GAME_STATUS_2"] = "pass";  // untranslated
Blockly.Msg["RACINGCAR_GAME_STATUS_3"] = "over";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_1"] = "# frame";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_10"] = "number of coins obtained";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_2"] = "game status";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_3"] = "player id";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_4"] = "x position of player";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_5"] = "y position of player";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_6"] = "advanced distance of player";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_7"] = "velocity";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_8"] = "positions of all cars";  // untranslated
Blockly.Msg["RACINGCAR_SCENE_INFO_9"] = "positions of coins";  // untranslated
Blockly.Msg["REDO"] = "Rehacer";
Blockly.Msg["REMOVE_COMMENT"] = "Eliminar comentario";
Blockly.Msg["RENAME_VARIABLE"] = "Cambiar nombre de variable…";
Blockly.Msg["RENAME_VARIABLE_TITLE"] = "Renombrar todas las variables «%1» a:";
Blockly.Msg["TEXT_APPEND_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_APPEND_TITLE"] = "a %1 añade el texto %2";
Blockly.Msg["TEXT_APPEND_TOOLTIP"] = "Añadir texto a la variable '%1'.";
Blockly.Msg["TEXT_CHANGECASE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#adjusting-text-case";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_LOWERCASE"] = "a minúsculas";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_TITLECASE"] = "a Mayúsculas Cada Palabra";
Blockly.Msg["TEXT_CHANGECASE_OPERATOR_UPPERCASE"] = "a MAYÚSCULAS";
Blockly.Msg["TEXT_CHANGECASE_TITLE"] = "%2 %1";  // untranslated
Blockly.Msg["TEXT_CHANGECASE_TOOLTIP"] = "Devuelve una copia del texto en un tamaño diferente.";
Blockly.Msg["TEXT_CHARAT_FIRST"] = "obtener la primera letra";
Blockly.Msg["TEXT_CHARAT_FROM_END"] = "obtener la letra # del final";
Blockly.Msg["TEXT_CHARAT_FROM_START"] = "obtener la letra #";
Blockly.Msg["TEXT_CHARAT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-text";  // untranslated
Blockly.Msg["TEXT_CHARAT_LAST"] = "obtener la última letra";
Blockly.Msg["TEXT_CHARAT_RANDOM"] = "obtener letra aleatoria";
Blockly.Msg["TEXT_CHARAT_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_CHARAT_TITLE"] = "en el texto %1 %2";
Blockly.Msg["TEXT_CHARAT_TOOLTIP"] = "Devuelve la letra en la posición especificada.";
Blockly.Msg["TEXT_COUNT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#counting-substrings";
Blockly.Msg["TEXT_COUNT_MESSAGE0"] = "contar %1 en %2";
Blockly.Msg["TEXT_COUNT_TOOLTIP"] = "Cuantas veces aparece un texto dentro de otro texto.";
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TOOLTIP"] = "Agregar un elemento al texto.";
Blockly.Msg["TEXT_CREATE_JOIN_TITLE_JOIN"] = "unir";
Blockly.Msg["TEXT_CREATE_JOIN_TOOLTIP"] = "Agregar, eliminar o reordenar las secciones para reconfigurar este bloque de texto.";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_END"] = "hasta la letra # del final";
Blockly.Msg["TEXT_GET_SUBSTRING_END_FROM_START"] = "hasta la letra #";
Blockly.Msg["TEXT_GET_SUBSTRING_END_LAST"] = "hasta la última letra";
Blockly.Msg["TEXT_GET_SUBSTRING_HELPURL"] = "https://github.com/google/blockly/wiki/Text#extracting-a-region-of-text";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_INPUT_IN_TEXT"] = "en el texto";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FIRST"] = "obtener subcadena desde la primera letra";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_END"] = "obtener subcadena desde la letra # del final";
Blockly.Msg["TEXT_GET_SUBSTRING_START_FROM_START"] = "obtener subcadena desde la letra #";
Blockly.Msg["TEXT_GET_SUBSTRING_TAIL"] = "";  // untranslated
Blockly.Msg["TEXT_GET_SUBSTRING_TOOLTIP"] = "Devuelve una porción determinada del texto.";
Blockly.Msg["TEXT_INDEXOF_HELPURL"] = "https://github.com/google/blockly/wiki/Text#finding-text";  // untranslated
Blockly.Msg["TEXT_INDEXOF_OPERATOR_FIRST"] = "encontrar la primera aparición del texto";
Blockly.Msg["TEXT_INDEXOF_OPERATOR_LAST"] = "encontrar la última aparición del texto";
Blockly.Msg["TEXT_INDEXOF_TITLE"] = "en el texto %1 %2 %3";
Blockly.Msg["TEXT_INDEXOF_TOOLTIP"] = "Devuelve el índice de la primera/última aparición del primer texto en el segundo texto. Devuelve %1 si el texto no se encuentra.";
Blockly.Msg["TEXT_ISEMPTY_HELPURL"] = "https://github.com/google/blockly/wiki/Text#checking-for-empty-text";  // untranslated
Blockly.Msg["TEXT_ISEMPTY_TITLE"] = "%1 está vacío";
Blockly.Msg["TEXT_ISEMPTY_TOOLTIP"] = "Devuelve verdadero si el texto proporcionado está vacío.";
Blockly.Msg["TEXT_JOIN_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-creation";  // untranslated
Blockly.Msg["TEXT_JOIN_TITLE_CREATEWITH"] = "crear texto con";
Blockly.Msg["TEXT_JOIN_TOOLTIP"] = "Crear un fragmento de texto al unir cualquier número de elementos.";
Blockly.Msg["TEXT_LENGTH_HELPURL"] = "https://github.com/google/blockly/wiki/Text#text-modification";  // untranslated
Blockly.Msg["TEXT_LENGTH_TITLE"] = "longitud de %1";
Blockly.Msg["TEXT_LENGTH_TOOLTIP"] = "Devuelve el número de letras (espacios incluidos) del texto proporcionado.";
Blockly.Msg["TEXT_PRINT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#printing-text";  // untranslated
Blockly.Msg["TEXT_PRINT_TITLE"] = "imprimir %1";
Blockly.Msg["TEXT_PRINT_TOOLTIP"] = "Imprimir el texto, número u otro valor especificado.";
Blockly.Msg["TEXT_PROMPT_HELPURL"] = "https://github.com/google/blockly/wiki/Text#getting-input-from-the-user";  // untranslated
Blockly.Msg["TEXT_PROMPT_TOOLTIP_NUMBER"] = "Solicitar al usuario un número.";
Blockly.Msg["TEXT_PROMPT_TOOLTIP_TEXT"] = "Solicitar al usuario un texto.";
Blockly.Msg["TEXT_PROMPT_TYPE_NUMBER"] = "solicitar número con el mensaje";
Blockly.Msg["TEXT_PROMPT_TYPE_TEXT"] = "solicitar texto con el mensaje";
Blockly.Msg["TEXT_REPLACE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#replacing-substrings";
Blockly.Msg["TEXT_REPLACE_MESSAGE0"] = "reemplazar %1 con %2 en %3";
Blockly.Msg["TEXT_REPLACE_TOOLTIP"] = "Reemplazar todas las veces que un texto dentro de otro texto.";
Blockly.Msg["TEXT_REVERSE_HELPURL"] = "https://github.com/google/blockly/wiki/Text#reversing-text";
Blockly.Msg["TEXT_REVERSE_MESSAGE0"] = "invertir %1";
Blockly.Msg["TEXT_REVERSE_TOOLTIP"] = "Invierte el orden de los caracteres en el texto.";
Blockly.Msg["TEXT_TEXT_HELPURL"] = "https://es.wikipedia.org/wiki/Cadena_de_caracteres";
Blockly.Msg["TEXT_TEXT_TOOLTIP"] = "Una letra, palabra o línea de texto.";
Blockly.Msg["TEXT_TRIM_HELPURL"] = "https://github.com/google/blockly/wiki/Text#trimming-removing-spaces";  // untranslated
Blockly.Msg["TEXT_TRIM_OPERATOR_BOTH"] = "quitar espacios de ambos lados de";
Blockly.Msg["TEXT_TRIM_OPERATOR_LEFT"] = "quitar espacios iniciales de";
Blockly.Msg["TEXT_TRIM_OPERATOR_RIGHT"] = "quitar espacios finales de";
Blockly.Msg["TEXT_TRIM_TITLE"] = "%2 %1";  // untranslated
Blockly.Msg["TEXT_TRIM_TOOLTIP"] = "Devuelve una copia del texto sin los espacios de uno o ambos extremos.";
Blockly.Msg["TODAY"] = "Hoy";
Blockly.Msg["UNDO"] = "Deshacer";
Blockly.Msg["UNNAMED_KEY"] = "Sin nombre";
Blockly.Msg["VARIABLES_DEFAULT_NAME"] = "elemento";
Blockly.Msg["VARIABLES_GET_CREATE_SET"] = "Crear 'establecer %1'";
Blockly.Msg["VARIABLES_GET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#get";  // untranslated
Blockly.Msg["VARIABLES_GET_TOOLTIP"] = "Devuelve el valor de esta variable.";
Blockly.Msg["VARIABLES_SET"] = "establecer %1 a %2";
Blockly.Msg["VARIABLES_SET_CREATE_GET"] = "Crear 'obtener %1'";
Blockly.Msg["VARIABLES_SET_HELPURL"] = "https://github.com/google/blockly/wiki/Variables#set";  // untranslated
Blockly.Msg["VARIABLES_SET_TOOLTIP"] = "Establece esta variable para que sea igual a la entrada.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS"] = "Ya existe una variable llamada '%1'.";
Blockly.Msg["VARIABLE_ALREADY_EXISTS_FOR_ANOTHER_TYPE"] = "Ya existe una variable nombrada '%1' para otra variable del tipo: '%2'.";
Blockly.Msg["WORKSPACE_ARIA_LABEL"] = "Espacio de trabajo de Blockly";
Blockly.Msg["WORKSPACE_COMMENT_DEFAULT_TEXT"] = "Di algo…";
Blockly.Msg["CONTROLS_FOREACH_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_FOR_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_IF_ELSEIF_TITLE_ELSEIF"] = Blockly.Msg["CONTROLS_IF_MSG_ELSEIF"];
Blockly.Msg["CONTROLS_IF_ELSE_TITLE_ELSE"] = Blockly.Msg["CONTROLS_IF_MSG_ELSE"];
Blockly.Msg["CONTROLS_IF_IF_TITLE_IF"] = Blockly.Msg["CONTROLS_IF_MSG_IF"];
Blockly.Msg["CONTROLS_IF_MSG_THEN"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["CONTROLS_WHILEUNTIL_INPUT_DO"] = Blockly.Msg["CONTROLS_REPEAT_INPUT_DO"];
Blockly.Msg["LISTS_CREATE_WITH_ITEM_TITLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["LISTS_GET_INDEX_HELPURL"] = Blockly.Msg["LISTS_INDEX_OF_HELPURL"];
Blockly.Msg["LISTS_GET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_GET_SUBLIST_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_INDEX_OF_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["LISTS_SET_INDEX_INPUT_IN_LIST"] = Blockly.Msg["LISTS_INLIST"];
Blockly.Msg["MATH_CHANGE_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["PROCEDURES_DEFRETURN_COMMENT"] = Blockly.Msg["PROCEDURES_DEFNORETURN_COMMENT"];
Blockly.Msg["PROCEDURES_DEFRETURN_DO"] = Blockly.Msg["PROCEDURES_DEFNORETURN_DO"];
Blockly.Msg["PROCEDURES_DEFRETURN_PROCEDURE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_PROCEDURE"];
Blockly.Msg["PROCEDURES_DEFRETURN_TITLE"] = Blockly.Msg["PROCEDURES_DEFNORETURN_TITLE"];
Blockly.Msg["TEXT_APPEND_VARIABLE"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];
Blockly.Msg["TEXT_CREATE_JOIN_ITEM_TITLE_ITEM"] = Blockly.Msg["VARIABLES_DEFAULT_NAME"];

Blockly.Msg["LOGIC_HUE"] = "100";
Blockly.Msg["LOOPS_HUE"] = "140";
Blockly.Msg["MATH_HUE"] = "170";
Blockly.Msg["TEXTS_HUE"] = "190";
Blockly.Msg["LISTS_HUE"] = "210";
Blockly.Msg["DICTS_HUE"] = "230";
Blockly.Msg["NDARRAY_HUE"] = "250";
Blockly.Msg["MODEL_HUE"] = "270";
Blockly.Msg["COLOUR_HUE"] = "20";
Blockly.Msg["VARIABLES_HUE"] = "290";
Blockly.Msg["VARIABLES_DYNAMIC_HUE"] = "300";
Blockly.Msg["PROCEDURES_HUE"] = "310";
Blockly.Msg["PLOT_HUE"] = "335";
Blockly.Msg["FILE_HUE"] = "360";
Blockly.Msg["MLGAME_HUE"] = "20";